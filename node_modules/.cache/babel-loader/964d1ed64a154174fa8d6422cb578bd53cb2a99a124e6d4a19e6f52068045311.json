{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './SubmitButton.css';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\nconst SubmitButton = () => {\n  _s();\n  const [clicked, setClicked] = useState(false);\n  const [content, setContent] = useState(\"\");\n  const [wordCount, setWordCount] = useState([]);\n  const handleClick = () => {\n    setClicked(true);\n    fetch(\"https://www.terriblytinytales.com/test.txt\").then(response => response.text()).then(data => {\n      setContent(data);\n      const words = data.toLowerCase().match(/\\b\\S+\\b/g);\n      const wordCountObj = {};\n      words.forEach(word => {\n        wordCountObj[word] = (wordCountObj[word] || 0) + 1;\n      });\n      const wordCountArr = Object.keys(wordCountObj).map(key => ({\n        word: key,\n        count: wordCountObj[key]\n      }));\n      wordCountArr.sort((a, b) => b.count - a.count);\n      setWordCount(wordCountArr.slice(0, 20));\n    }).catch(error => console.log(error));\n  };\n\n  /* return clicked ? (\r\n    <div style={{ width: \"100%\", height: 500 }}>\r\n      <BarChart data={wordCount}>\r\n        <XAxis dataKey=\"word\" />\r\n        <YAxis />\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <Tooltip />\r\n        <Bar dataKey=\"count\" fill=\"#8884d8\" />\r\n      </BarChart>\r\n    </div>\r\n  ) : (\r\n    <button onClick={handleClick}>Submit</button>\r\n  ); */\n  /* return clicked ? (\r\n    <div>\r\n      {Object.keys(wordCount).map((word, index) => (\r\n        <div key={index}>\r\n          {word}: {wordCount[word]}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  ) : (\r\n    <button onClick={handleClick}>Submit</button>\r\n  ); */\n};\n_s(SubmitButton, \"CJv+8puuEGIV0os4sYB9ncnl1Q0=\");\n_c = SubmitButton;\nexport default SubmitButton;\nvar _c;\n$RefreshReg$(_c, \"SubmitButton\");","map":{"version":3,"names":["React","useState","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","SubmitButton","_s","clicked","setClicked","content","setContent","wordCount","setWordCount","handleClick","fetch","then","response","text","data","words","toLowerCase","match","wordCountObj","forEach","word","wordCountArr","Object","keys","map","key","count","sort","a","b","slice","catch","error","console","log","_c","$RefreshReg$"],"sources":["C:/Users/Ayush/Desktop/TinyTales/TinyProject/tiny-project/src/SubmitButton.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport './SubmitButton.css';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\r\n\r\nconst SubmitButton = () => {\r\n  const [clicked, setClicked] = useState(false);\r\n  const [content, setContent] = useState(\"\");\r\n  const [wordCount, setWordCount] = useState([]);\r\n\r\n  const handleClick = () => {\r\n    setClicked(true);\r\n    fetch(\"https://www.terriblytinytales.com/test.txt\")\r\n      .then((response) => response.text())\r\n      .then((data) => {\r\n        setContent(data);\r\n        const words = data.toLowerCase().match(/\\b\\S+\\b/g);\r\n        const wordCountObj = {};\r\n        words.forEach((word) => {\r\n          wordCountObj[word] = (wordCountObj[word] || 0) + 1;\r\n        });\r\n        const wordCountArr = Object.keys(wordCountObj).map((key) => ({\r\n          word: key,\r\n          count: wordCountObj[key],\r\n        }));\r\n        wordCountArr.sort((a, b) => b.count - a.count);\r\n        setWordCount(wordCountArr.slice(0, 20));\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  /* return clicked ? (\r\n    <div style={{ width: \"100%\", height: 500 }}>\r\n      <BarChart data={wordCount}>\r\n        <XAxis dataKey=\"word\" />\r\n        <YAxis />\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <Tooltip />\r\n        <Bar dataKey=\"count\" fill=\"#8884d8\" />\r\n      </BarChart>\r\n    </div>\r\n  ) : (\r\n    <button onClick={handleClick}>Submit</button>\r\n  ); */\r\n  /* return clicked ? (\r\n    <div>\r\n      {Object.keys(wordCount).map((word, index) => (\r\n        <div key={index}>\r\n          {word}: {wordCount[word]}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  ) : (\r\n    <button onClick={handleClick}>Submit</button>\r\n  ); */\r\n};\r\n\r\nexport default SubmitButton;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,oBAAoB;AAC3B,SAASC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,QAAQ,UAAU;AAE9E,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMe,WAAW,GAAGA,CAAA,KAAM;IACxBL,UAAU,CAAC,IAAI,CAAC;IAChBM,KAAK,CAAC,4CAA4C,CAAC,CAChDC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdR,UAAU,CAACQ,IAAI,CAAC;MAChB,MAAMC,KAAK,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,UAAU,CAAC;MAClD,MAAMC,YAAY,GAAG,CAAC,CAAC;MACvBH,KAAK,CAACI,OAAO,CAAEC,IAAI,IAAK;QACtBF,YAAY,CAACE,IAAI,CAAC,GAAG,CAACF,YAAY,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MACpD,CAAC,CAAC;MACF,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACL,YAAY,CAAC,CAACM,GAAG,CAAEC,GAAG,KAAM;QAC3DL,IAAI,EAAEK,GAAG;QACTC,KAAK,EAAER,YAAY,CAACO,GAAG;MACzB,CAAC,CAAC,CAAC;MACHJ,YAAY,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACH,KAAK,GAAGE,CAAC,CAACF,KAAK,CAAC;MAC9ClB,YAAY,CAACa,YAAY,CAACS,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACzC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EACzC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC9B,EAAA,CAlDID,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAoDlB,eAAeA,YAAY;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
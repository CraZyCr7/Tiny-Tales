{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ayush\\\\Desktop\\\\TinyTales\\\\TinyProject\\\\tiny-project\\\\src\\\\SubmitButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport './SubmitButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SubmitButton = () => {\n  _s();\n  const [clicked, setClicked] = useState(false);\n  const [content, setContent] = useState(\"\");\n  const [wordCount, setWordCount] = useState([]);\n  const handleClick = () => {\n    setClicked(true);\n    fetch(\"https://www.terriblytinytales.com/test.txt\").then(response => response.text()).then(data => {\n      setContent(data);\n      const words = data.toLowerCase().match(/\\b\\S+\\b/g);\n      const wordCountObj = {};\n      words.forEach(word => {\n        wordCountObj[word] = (wordCountObj[word] || 0) + 1;\n      });\n      const wordCountArr = Object.keys(wordCountObj).map(key => ({\n        word: key,\n        count: wordCountObj[key]\n      }));\n      wordCountArr.sort((a, b) => b.count - a.count);\n      const top20Words = wordCountArr.slice(0, 20);\n      setWordCount(top20Words);\n    }).catch(error => console.log(error));\n  };\n  const handleExport = () => {\n    const csvData = wordCount.map(word => `${word.word},${word.count}`).join(\"\\n\");\n    const csvBlob = new Blob([csvData], {\n      type: \"text/csv\"\n    });\n    const url = URL.createObjectURL(csvBlob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", \"word-count.csv\");\n    document.body.appendChild(link);\n    link.click();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: clicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: 500\n      },\n      children: [/*#__PURE__*/_jsxDEV(BarChart, {\n        data: wordCount,\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"count\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExport,\n        children: \"Export\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(SubmitButton, \"CJv+8puuEGIV0os4sYB9ncnl1Q0=\");\n_c = SubmitButton;\nexport default SubmitButton;\nvar _c;\n$RefreshReg$(_c, \"SubmitButton\");","map":{"version":3,"names":["React","useState","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","jsxDEV","_jsxDEV","Fragment","_Fragment","SubmitButton","_s","clicked","setClicked","content","setContent","wordCount","setWordCount","handleClick","fetch","then","response","text","data","words","toLowerCase","match","wordCountObj","forEach","word","wordCountArr","Object","keys","map","key","count","sort","a","b","top20Words","slice","catch","error","console","log","handleExport","csvData","join","csvBlob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","children","style","width","height","dataKey","fileName","_jsxFileName","lineNumber","columnNumber","strokeDasharray","fill","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ayush/Desktop/TinyTales/TinyProject/tiny-project/src/SubmitButton.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\r\nimport './SubmitButton.css'\r\n\r\nconst SubmitButton = () => {\r\n  const [clicked, setClicked] = useState(false);\r\n  const [content, setContent] = useState(\"\");\r\n  const [wordCount, setWordCount] = useState([]);\r\n\r\n  const handleClick = () => {\r\n    setClicked(true);\r\n    fetch(\"https://www.terriblytinytales.com/test.txt\")\r\n      .then((response) => response.text())\r\n      .then((data) => {\r\n        setContent(data);\r\n        const words = data.toLowerCase().match(/\\b\\S+\\b/g);\r\n        const wordCountObj = {};\r\n        words.forEach((word) => {\r\n          wordCountObj[word] = (wordCountObj[word] || 0) + 1;\r\n        });\r\n        const wordCountArr = Object.keys(wordCountObj).map((key) => ({\r\n          word: key,\r\n          count: wordCountObj[key],\r\n        }));\r\n        wordCountArr.sort((a, b) => b.count - a.count);\r\n        const top20Words = wordCountArr.slice(0, 20);\r\n        setWordCount(top20Words);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const handleExport = () => {\r\n    const csvData = wordCount.map((word) => `${word.word},${word.count}`).join(\"\\n\");\r\n    const csvBlob = new Blob([csvData], { type: \"text/csv\" });\r\n    const url = URL.createObjectURL(csvBlob);\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    link.setAttribute(\"download\", \"word-count.csv\");\r\n    document.body.appendChild(link);\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {clicked ? (\r\n        <div style={{ width: \"100%\", height: 500 }}>\r\n          <BarChart data={wordCount}>\r\n            <XAxis dataKey=\"word\" />\r\n            <YAxis />\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <Tooltip />\r\n            <Bar dataKey=\"count\" fill=\"#8884d8\" />\r\n          </BarChart>\r\n          <button onClick={handleExport}>Export</button>\r\n        </div>\r\n      ) : (\r\n        <button onClick={handleClick}>Submit</button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SubmitButton;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}